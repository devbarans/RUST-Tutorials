   
/**
    Vector, aynÄ± tÃ¼rdeki deÄŸerleri bir arada tutan bir veri yapÄ±sÄ±dÄ±r.
    Vector, dinamik boyutlu ve sabit tÃ¼rdÃ¼r. Yani bir vector'Ã¼n eleman tÃ¼rÃ¼ sabit olmalÄ±dÄ±r, ancak eleman sayÄ±sÄ± deÄŸiÅŸebilir.
    Vector, standart kÃ¼tÃ¼phanede tanÄ±mlanmÄ±ÅŸtÄ±r. Kullanmak iÃ§in std::vec::Vec modÃ¼lÃ¼nÃ¼ eklememize gerek yoktur.     Vector, heap'te tutulur. Bu nedenle, vector'Ã¼n boyutu Ã§alÄ±ÅŸma zamanÄ±nda deÄŸiÅŸtirilebilir.
    Vector tanÄ±mlamak iÃ§in Vec::new() fonksiyonunu kullanabiliriz.
 */
    /**
    ğŸ’¡ VektÃ¶rler (Vec<T>) dinamik dizilerdir.
    ğŸ”¥ Array'ler sÄ±kÄ±cÄ±dÄ±r, sabit boyutludur.
    ğŸ“¦ Rust'taki array'in "serbest ruhlu, geniÅŸlemeyi seven" kuzeni gibidir.
    ğŸš€ VektÃ¶rler ise esnektir, bÃ¼yÃ¼yebilir, kÃ¼Ã§Ã¼lebilir ve heap Ã¼zerinde saklanÄ±r.
    */
    
pub fn run() {
    let _vectors = vec![1, 2, 3, 4, 5]; // Vector tanÄ±mladÄ±k.TÃ¼rÃ¼ belirtmedik. Rust tÃ¼r Ã§Ä±karÄ±mÄ± yaparak tÃ¼rÃ¼ belirler.
    let vectors: Vec<i16> = vec![1, 2, 3, 4, 5]; // Vector tanÄ±mladÄ±k. TÃ¼rÃ¼nÃ¼ belirttik.
    println!("Vectors: {vectors:?}"); // :? TÃ¼m elemanlarÄ± yazdÄ±rÄ±r.-> Vectors: [1, 2, 3, 4, 5]

    let mut scores: Vec<i32> = vec![10, 20, 30, 40, 50]; // Mutable vector tanÄ±mladÄ±k.Yani elemanlarÄ± deÄŸiÅŸtirebiliriz.
    scores.push(60); // Vector'e yeni bir eleman ekledik.
    scores.push(75); 
    print!("{:?}", scores); // [10, 20, 30, 40, 50, 60]
    // ğŸ“¦ Vector'ler, heap'te tutulduÄŸu iÃ§in, elemanlar eklenip Ã§Ä±karÄ±ldÄ±kÃ§a bellek yeniden boyutlandÄ±rÄ±lÄ±r.
    // ğŸ“¦ Bu nedenle, vector'lerin elemanlarÄ±na eriÅŸmek, eklemek ve Ã§Ä±karmak, array'lere gÃ¶re daha maliyetlidir.
    // ğŸ“¦ Vector'ler, array'lerden daha esnek ve kullanÄ±ÅŸlÄ±dÄ±r, ancak performans aÃ§Ä±sÄ±ndan biraz daha maliyetlidir
    scores.pop(); // Vector'den son elemanÄ± Ã§Ä±kardÄ±k.
    print!("{scores:?}"); // [10, 20, 30, 40, 50,60]
    scores.remove(2); // Vector'den 0. elemanÄ± Ã§Ä±kardÄ±k.
    print!("{scores:?}"); // [20, 40, 50, 60]
    scores[0] = 25; // Vector'Ã¼n 0. elemanÄ±nÄ± deÄŸiÅŸtirdik.

    

    // Vector'Ã¼n elemanlarÄ±na indeksle eriÅŸebiliriz.
    // _ ile baÅŸlayan deÄŸiÅŸkenlerin deÄŸerlerini kullanmadÄ±ÄŸÄ±mÄ±zÄ± belirtiriz.Buna dikkat edilir
    let _first_score = scores[0]; // scores vector'Ã¼nÃ¼n 0. elemanÄ±nÄ± aldÄ±k.



}