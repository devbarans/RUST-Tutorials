   
/**
    Vector, aynÄ± tÃ¼rdeki deÄŸerleri bir arada tutan bir veri yapÄ±sÄ±dÄ±r.
    Vector, dinamik boyutlu ve sabit tÃ¼rdÃ¼r. Yani bir vector'Ã¼n eleman tÃ¼rÃ¼ sabit olmalÄ±dÄ±r, ancak eleman sayÄ±sÄ± deÄŸiÅŸebilir.
    Vector, standart kÃ¼tÃ¼phanede tanÄ±mlanmÄ±ÅŸtÄ±r. Kullanmak iÃ§in std::vec::Vec modÃ¼lÃ¼nÃ¼ eklememize gerek yoktur.     Vector, heap'te tutulur. Bu nedenle, vector'Ã¼n boyutu Ã§alÄ±ÅŸma zamanÄ±nda deÄŸiÅŸtirilebilir.
    Vector tanÄ±mlamak iÃ§in Vec::new() fonksiyonunu kullanabiliriz.
 */
    /**
    ğŸ’¡ VektÃ¶rler (Vec<T>) dinamik dizilerdir.
    ğŸ”¥ Array'ler sÄ±kÄ±cÄ±dÄ±r, sabit boyutludur.
    ğŸ“¦ Rust'taki array'in "serbest ruhlu, geniÅŸlemeyi seven" kuzeni gibidir.
    ğŸš€ VektÃ¶rler ise esnektir, bÃ¼yÃ¼yebilir, kÃ¼Ã§Ã¼lebilir ve heap Ã¼zerinde saklanÄ±r.
    */

pub fn run() {
    let _vectors = vec![1, 2, 3, 4, 5]; // Vector tanÄ±mladÄ±k.TÃ¼rÃ¼ belirtmedik. Rust tÃ¼r Ã§Ä±karÄ±mÄ± yaparak tÃ¼rÃ¼ belirler.
    let vectors: Vec<i16> = vec![1, 2, 3, 4, 5]; // Vector tanÄ±mladÄ±k. TÃ¼rÃ¼nÃ¼ belirttik.
    println!("Vectors: {vectors:?}"); // :? TÃ¼m elemanlarÄ± yazdÄ±rÄ±r.-> Vectors: [1, 2, 3, 4, 5]

    let mut scores: Vec<i32> = vec![10, 20, 30, 40, 50]; // Mutable vector tanÄ±mladÄ±k.Yani elemanlarÄ± deÄŸiÅŸtirebiliriz.
    scores.push(60); // Vector'e yeni bir eleman ekledik.
    scores.push(75); 
    print!("{:?}", scores); // [10, 20, 30, 40, 50, 60]
    // ğŸ“¦ Vector'ler, heap'te tutulduÄŸu iÃ§in, elemanlar eklenip Ã§Ä±karÄ±ldÄ±kÃ§a bellek yeniden boyutlandÄ±rÄ±lÄ±r.
    // ğŸ“¦ Bu nedenle, vector'lerin elemanlarÄ±na eriÅŸmek, eklemek ve Ã§Ä±karmak, array'lere gÃ¶re daha maliyetlidir.
    // ğŸ“¦ Vector'ler, array'lerden daha esnek ve kullanÄ±ÅŸlÄ±dÄ±r, ancak performans aÃ§Ä±sÄ±ndan biraz daha maliyetlidir
    scores.pop(); // Vector'den son elemanÄ± Ã§Ä±kardÄ±k.
    print!("{scores:?}"); // [10, 20, 30, 40, 50,60]
    scores.remove(2); // Vector'den 0. elemanÄ± Ã§Ä±kardÄ±k.
    print!("{scores:?}"); // [20, 40, 50, 60]
    scores[0] = 25; // Vector'Ã¼n 0. elemanÄ±nÄ± deÄŸiÅŸtirdik.

    // unwrap() fonksiyonu, Option tÃ¼rÃ¼ndeki deÄŸerlerin iÃ§indeki deÄŸeri dÃ¶ndÃ¼rÃ¼r.
    // EÄŸer Option tÃ¼rÃ¼ndeki deÄŸer None ise unwrap() fonksiyonu programÄ± Ã§Ã¶ker.
    let last_score = scores.pop().unwrap(); 
    println!("Last Score: {last_score}"); // Last Score: 60

    

    // Vector'Ã¼n elemanlarÄ±na indeksle eriÅŸebiliriz.
    // _ ile baÅŸlayan deÄŸiÅŸkenlerin deÄŸerlerini kullanmadÄ±ÄŸÄ±mÄ±zÄ± belirtiriz.Buna dikkat edilir
    let _first_score = scores[0]; // scores vector'Ã¼nÃ¼n 0. elemanÄ±nÄ± aldÄ±k.

    // iter() fonksiyonu vector'Ã¼n elemanlarÄ±nÄ± okumak iÃ§in kullanÄ±lÄ±r.
    for score in scores.iter(){
     // iter() kullanÄ±ldÄ±ÄŸÄ±nda, vektÃ¶rÃ¼n elemanlarÄ± Ã¼zerinde sadece okuma iÅŸlemi yapÄ±lÄ±r ve vektÃ¶r deÄŸiÅŸmez.
     // EÄŸer kullanÄ±lmazsa kullanÄ±ldÄ±ÄŸÄ±nda, vektÃ¶rÃ¼n elemanlarÄ± Ã¼zerinde deÄŸiÅŸiklik yapÄ±labilir ve vektÃ¶rÃ¼n sahipliÄŸi dÃ¶ngÃ¼ye geÃ§er.             * 
    
        println!("Score: {score}"); // Vector'Ã¼n elemanlarÄ±nÄ± yazdÄ±rdÄ±k.

        
    } // scores vector'Ã¼nÃ¼n sahipliÄŸi dÃ¶ngÃ¼den Ã§Ä±ktÄ±ÄŸÄ±nda geri alÄ±nÄ±r. 

   // new ile bir initilaze edilmiÅŸ vector oluÅŸturulur.Constructor gibi dÃ¼ÅŸÃ¼nebiliriz.
   // Ä°lk baÅŸta tipi Vec<T> olarak belirsiz belirtir rust.Ä°lk girdi yapÄ±lÄ±nca tip belirlenir.
   // BoÅŸ bir vector tanÄ±mladÄ±k.
   // mut anahtar kelimesi ile vector'Ã¼ deÄŸiÅŸtirilebilir yaptÄ±k.
    let mut colors_constant = Vec::new(); 
    let mut color_dynamic = Vec::new();
    
    // Vec<&str>
    // Bu satÄ±rda "Red" string dilimi (&str) tÃ¼rÃ¼nde bir eleman olarak eklenir.
    //&str tÃ¼rÃ¼, Rust'ta sabit uzunlukta ve deÄŸiÅŸtirilemez bir string dilimidir.
    colors_constant.push("Red"); // Vector'e yeni bir eleman ekledik.

    // Vec<String>
    // Bu satÄ±rda "Green" string tÃ¼rÃ¼nde bir eleman olarak eklenir.
    // String tÃ¼rÃ¼, Rust'ta deÄŸiÅŸtirilebilir ve dinamik uzunlukta bir string tÃ¼rÃ¼dÃ¼r.
    color_dynamic.push(String::from("Green")); // Vector'e yeni bir eleman ekledik.
    
    // println ile yeni bir satÄ±r karakteri eklenir
    // unwrap() fonksiyonu, Option tÃ¼rÃ¼ndeki deÄŸerlerin iÃ§indeki deÄŸeri dÃ¶ndÃ¼rÃ¼r.
    println!("Constant String: {}", colors_constant.first().unwrap());

    // print ile yeni bir satÄ±r karakteri eklenmez
    print!("Dynamic String: {}", color_dynamic.first().unwrap());
    // ğŸ“¦ Vector'ler, heap'te tutulduÄŸu iÃ§in, elemanlar eklenip Ã§Ä±karÄ±ldÄ±kÃ§a bellek yeniden boyutlandÄ±rÄ±lÄ±r.

    // collect() fonksiyonu, bir iterator'den bir koleksiyon oluÅŸturmak iÃ§in kullanÄ±lÄ±r.
    let codes: Vec<u8> = (10..=20).collect(); // 10'dan 20'ye kadar olan sayÄ±larÄ± iÃ§eren bir vector oluÅŸturduk.
    println!("{:?}", codes); // [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

    // Vector'Ã¼n belirli bir aralÄ±ÄŸÄ±na eriÅŸmek iÃ§in slicing yapabiliriz.
    let two_codes: Vec<u8> = codes[1..3].to_vec(); // Vector'Ã¼n 1. ve 2. elemanlarÄ±nÄ± alarak yeni bir vector oluÅŸturduk.
    println!("{:?}", two_codes); // [11, 12]

}